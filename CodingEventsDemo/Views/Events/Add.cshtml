@using CodingEventsDemo.ViewModels;
@model AddEventViewModel;
<h1>Add Event</h1>

<form aps-controller="Events" asp-action="Add" method="post">

    <div class="form-row">
        <div class="form-group col-md-6">
            <label asp-for="Name"></label>
            <input class="form-control" asp-for="Name" aria-describedby="nameHelp" type="text" placeholder="Enter Event Name" />
            <span asp-validation-for="Name"></span>
            <small id="nameHelp" class="form-text text-muted">A unique name would work better </small>
        </div>

        <div class="form-group col-md-6">
            <label asp-for="Description"></label>
            <input class="form-control" asp-for="Description" aria-describedby="descriptionHelp" type="text" placeholder="Enter Event Description" />
            <span asp-validation-for="Description"></span>
            <small id="descriptionHelp" class="form-text text-muted">A long description is advised</small>
        </div>
    </div>


    <div class="form-row">
        <div class="form-group col-md-6">
            <label asp-for="ContactEmail">Contact Email</label>
            <input class="form-control" asp-for="ContactEmail" aria-describedby="emailHelp" type="email" placeholder="name@example.com" />
            <span asp-validation-for="ContactEmail"></span>
            <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>

        </div>

        <div class="form-group col-md-6">
            <label asp-for="ConfirmEmail">Confirm Email</label>
            <input class="form-control" asp-for="ConfirmEmail" type="email" placeholder="Confirm Contact Email" />
            <span asp-validation-for="ConfirmEmail"></span>
        </div>
    </div>

    <div class="form-group">
        <label asp-for="CategoryId">Category Type</label>
        <select class="form-control" asp-for="CategoryId" asp-items="Model.Categories">
            <option value="">Pick a Category</option>
        </select>
        <span asp-validation-for="CategoryId"></span>
    </div>

    <div class="form-group" id="locationField">
        <label>Event Address</label>
        <input class="form-control" id="autocomplete" placeholder="Enter your address" onFocus="geolocate()" type="text" />
    </div>

    <div class="form-group">
        <label asp-for="eventAddress.Street"></label>
        <input class="form-control" id="street_number" asp-for="eventAddress.Street" type="text" disabled="true" />
        <span asp-validation-for="eventAddress.Street"></span>
    </div>

    <div class="form-row">
        <div class="form-group col-md-6">
            <label asp-for="eventAddress.City"></label>
            <input class="form-control" id="locality" asp-for="eventAddress.City" type="text" disabled="true" />
            <span asp-validation-for="eventAddress.City"></span>
        </div>
        <div class="form-group col-md-4">
            <label asp-for="eventAddress.State"></label>
            <input class="form-control" id="administrative_area_level_1" asp-for="eventAddress.State" type="text" disabled="true" />
            <span asp-validation-for="eventAddress.State"></span>
        </div>
        <div class="form-group col-md-2">
            <label asp-for="eventAddress.Zipcode"></label>
            <input class="form-control" id="postal_code" asp-for="eventAddress.Zipcode" type="text" disabled="true" />
            <span asp-validation-for="eventAddress.Zipcode"></span>
        </div>
    </div>

    <input type="hidden" id="latitude" asp-for="eventAddress.Latitude">
    <input type="hidden" id="longitude" asp-for="eventAddress.Longitude">


    <input type="submit" class="btn btn-primary mb-2" value="Add Event" />

</form>
<br>
<br>
<br>
<br>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBqXHMNoJJwES8K9SkbOgKejtmsH52QlYo&callback=initAutocomplete&libraries=places&v=weekly"
        defer></script>


<script>
    let placeSearch;
    let autocomplete;
    const componentForm = {
        street_number: "short_name",
        route: "long_name",
        locality: "long_name",
        administrative_area_level_1: "short_name",
        postal_code: "short_name",
    };

    function initAutocomplete() {
        // Create the autocomplete object, restricting the search predictions to
        // geographical location types.
        autocomplete = new google.maps.places.Autocomplete(
            document.getElementById("autocomplete"),
            { types: ["geocode"] }
        );
        // Avoid paying for data that you don't need by restricting the set of
        // place fields that are returned to just the address components.
        autocomplete.setFields(["address_component"]);
        // When the user selects an address from the drop-down, populate the
        // address fields in the form.
        autocomplete.addListener("place_changed", fillInAddress);
    }

    function fillInAddress() {
        // Get the place details from the autocomplete object.
        const place = autocomplete.getPlace();

        for (const component in componentForm) {
            if (component != "route") { // street_number and route fields are combined into one field, street. So they don't need to be cleared out
                document.getElementById(component).value = ""; //clear out the input fields
                document.getElementById(component).disabled = false; //street field is editable after autofill
            }
        }

        // Get each component of the address from the place details,
        // and then fill-in the corresponding field on the form.

        let streetNumber;
        let route;
        for (const component of place.address_components) {
            const addressType = component.types[0];
            
            console.log("addressType: " + addressType);
            console.log("componentForm[addressType]: " + componentForm[addressType]);

            if (componentForm[addressType])
            {
                let val = component[componentForm[addressType]];

                if (addressType == "street_number")
                {
                    document.getElementById("street_number").value = val;
                }

                else if (addressType == "route")
                {
                    document.getElementById("street_number").value += " " + val;

                }

                else
                {
                    document.getElementById(addressType).value = val;
                }

             }
         }
    
    }        

    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition((position) => {
                const geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude,
                };
          

                //Save Latitude and Longitude information to the form input element to be saved in the database
                document.getElementById("latitude").value = geolocation.lat;
                document.getElementById("longitude").value = geolocation.lng;

                console.log("document.getElementById('latitude').value " + document.getElementById("latitude").value);
                console.log("document.getElementById('longitude').value" + document.getElementById("longitude").value);

                const circle = new google.maps.Circle({
                    center: geolocation,
                    radius: position.coords.accuracy,
                });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }
</script>
